Obtener el tipo de algo:
    typeof()
Forzar conversion:
    String(variable) Number(variable)
----------------------------------------------------------------------
NUMBER 
Devuelve el numero como cadena:
    toString(variable)
Devuelve una cadena de un número escrito es notacion cientifica
    toExponential(variable)
Para redondear un número:
    variable.toFixed(numeroDeDecimales)

PROPIEDADES:
    max_value | min_value -> Devuelve el valor mayor o menor de un número
    negative_infinity -> Representa el -infinito
    NaN -> Valor no numérico
    positive_infinity -> Representa el infinito
------------------------------------------------------------------------
STRING 
Devuelve la longitud de una cadena
    cadena.length

Permite acceder a un carácter en concreto de una cadena:
    cadena.charAt(i)

Devuelve la posicion de la primera ocurrencia del caracter pasadoc como parametro
    cadena.indexOf('parametro')

Devuelve la posicion de la última ocurrencia del caracter pasado como parametro
    cadena.lastIndexOf('paramento',[indiceDesdeELQueEmpezarABuscar])

Busca una coincidencia en una cadena y devuelve todas las coincidencias de una expresion regular encontradas
    array = cadena.match((/\b\w{1,4}\b/g)

Busca una coincidencia en una cadena y si existe reemplaza
    cadena.replace('cadenaABuscar','reemplazo')

Busca una coincidencia en una cadena y devuelve la posicion de la coincidencia. Devuelve -1 si no encuentra.
    cadena.search('cadenaABuscar')

Extrae una parte de una cadena en base a los parámetros que indiquemos como índices de inicio y final:
    laura.slice(0,3) -> lau

Corta una cadena en base a un separador que pasamos como parametro 
    var cadena = 'Laura, Martin'
    array = cadena.split(':')

Devuelve una subcadena en bas a un indice y longitud pasados como parametros
    var cadena = 'Mi página es ideal'
    var nuevaCadena = cadena.substr(3,9) -> página

Devuelve la cadena a minusculas o mayusculas, no la cambia.
    cadena.toLowerCase() || cadena.toUpperCase()

Elimina los espacios vacíos del principio y del final
    cadena.trim()

Convierte valores unicode en caracteres
    cadena = String.fromCharCode(65) -> A 

Une dos o más Strings y los devuelve concatenados en un nuevo String
    var cad1 = "Clase "
    var cad2 = cad1.concat("DWEC) -> Clase DWEC

Comprueba si el String termina con los caracteres pasados como parametro (true|false)
    cadena.endsWith('parametro')

Devuelve el unicode del caracter en el indice especificado
    cadena.charCodeAt(0) -> 99, codigo de la letra c

Devuelve un String con el número de copias de la cadena especificado por parametro
    resultado = cadena.repeat(2) -> cadenacadena

--------------------------------------------------------------------------
ARRAY 
Devuelve el último elemento de la matriz y lo elimina de la misma. Sí modifica.
    array.pop() 

Añade un elemento al final de la matriz y devuelve la nueva longitud. Sí modifica.
    array.push('nuevoElemento')

Invierte el orden de los elementos de la matriz. Sí modifica.
    array.reverse()

Devuelve el primer elemento de la matriz y lo elimina de la misma. Sí modifica.
    array.shift()

Ordena los elementos de una matriz. Sí modifica.
    array.sort()

Añade o elimina elementos de una matriz. Sí modifica
    array.splice(numDesdeElQueEmpiezaAEliminar, [numeroDeElementosAEliminar], [itemQueSeAñade])

Añade un elemento al principio de la matriz y devuelve la nueva longitud
    array.unshift(item1,[item2])

Devuelve una matriz con todos los elementos concatenados. No modifica
    array.concat()

Une todos los elementos en una cadena. No modifica.
    array.join()

Extrae una seccion de una matriz y la devuelve como una nueva matriz. No modifica.
    array.slice()

Devuelve una cadena que representa a una matriz y sus elementos. No modifica.
    array.toString()

Devuelve el primer indice del elemento que concuerda con el valor a comparar o -1 si no encuentra. No modifica.
    array.indexOf('elemento')

Devuelve el último elemento del elemento que concuerda con el valor a comparar o -1 si no encuentra. No modifica.   
    array.lastIndexOf()
---------------------------------------------------------------------------
DATE 

Formas de instanciar el objeto Date:
    var date = new Date() -> fecha de hoy a las 00.00
    var date = new Date(milisegundos desde 1970)
    var date = new Date(cadena de fecha)
    var date = new Date(año,mes,dia,horas,min,seg,miliseg) -> el mes empieza en 0.

Métodos:
Convierte una cadena que representa una fecha en el número de miliseg desde 1970.
    date.parse('cadena')

Devuelve el día del mes
    fecha.getDate()

Devuelve el día de la semana 
    fecha.getDay()

Devuelve el año
    fecha.getFullYear()

Devuelve la hora
    fecha.getHours()

Devuelve el milisegundo
    fecha.getMiliseconds()

Devuelve el minuto
    fecha.getMinutes()

Devuelve los segundos
    fecha.getSeconds()

Devuelve el mes 
    fecha.getMonth()

Devuelve el número de milisegundos que han pasado desde 1970    
    fecha.getTime()

Convierte la fecha en una cadena literal que la representa 
    fecha.toString()

Convierte la fecha en una cadena legible para humanos
    fecha.toDateString()

----->Cada GET tiene su SET correspondiente<-----

MATH 
· Constante de Euler: Math.E 
· Constante PI : Math.PI
· Valor absoluto: Math.abs()
· Devuelve el valor entero mas pequeño: Math.ceil()
· Devuelve el valor entero mas pequeño: Math.floor()
· Devuelve el más grande de dos valores: Math.max()
· Devuelve el más pequeño de dos valores: Math.min()
· Elevar: Math.pow(base,exponente)
· Número aleatorio de 0 a 1: Math.random()
· Redondeo al entero: Math.round()
· Raíz cuadrada de un valor: Math.sqrt(valor)

-----------------------------------------------------------------------
INTERACCIÓN CON EL NAVEGADOR:
BOM(Browser object model)
Algunos de los elementos que forman el BOM son los siguientes:
    1. Crear, mover, redimensionar y cerrar ventadas de navegador 
    2. Obtener info sobre el navegador 
    3. Propiedades de la pagina actual y de la pantalla del usuario
    4. Gestionm de cookies
    5. Objetos ActiveX en IE.

-> Objeto window:
Todos los objetos heredan del objeto windows.

    Representa la ventana completa del navegador. Se puede mover, redimensionar
    o abrir y cerrar nuevas ventanas.

    window.moveBy(x,y) -> mueve la ventana x pixeles a la drcha e y pixeles abajo.
        Valores negativos para desplazar hacia a izq o arriba.

    window.moveTo(x,y) -> desplaza la ventana del navegador hasta q la esquina sup izq 
    esté en la posicion x,y.
        Valores negativos para desplazar hacia a izq o arriba.

    window.resizeBy(x, y). Redimensiona la ventana del navegador de forma que su nueva anchura sea igual a
    (anchura_anterior + x) y su nueva altura sea igual a (altura_anterior + y). Se pueden emplear valores
    negativos para reducirla anchura y/o altura de la ventana.

    window.resizeTo(x, y). Redimensiona la ventana del navegador hasta que su anchura sea igual a x y su altura sea
    igual a y. No se permiten valores negativos.

-> Objeto Document:
Pertenece tanto al DOM como al BOM.
    Propiedades:
        lastModified: Fecha de la última modificación
        referrer: la URL desde la que se accedió a la página.
        title: texto de la etiqueta <title> solo lectura.
        URL: de la página actual del bnavegador. solo lectura.

    Arrays con info:
        anchors: contiene todas las anclas de la página.
        applets: contiene todos los applets de la pagina
        embeds: contiene todos los objetos embebidos de la pagina mediante la etiqueta <embed>
        forms: contiene todos los formularios
        images: contiene todas las imagenes de la pagina
        links: contiene todos los links

    Formas de acceso a los elementos de la página
        Parrafos: Document.getElementByTagName('p')
        Enlaces: document.links[0]
        Imagenes: document.images[0] || document.images['nombreImagen']
        Formularios: document.forms[0] || document.forms['nombreForm']

-> Objeto Location:
Location es una propiedad tanto de window como de document.
El objeto location representa la URL de la página HTML.
    Propiedades:
        1. hash: el contenido de la URL que se encuentra después de '#'
        2. host: nombre del servidor.
        3. hostname: la mayoria de las veces coincide con host, aunque en ocasiones se eliminan las www del principio.
        4. href: la URL completa del sitio actual.
        5. pathname: Todo el contenido que se encuentra despues del host.
        6. port: si se especifica en la URL, el puerto al que se accede.
        7. protocol: el protocolo de la URL, lo q se encuentra antes de //
        8. search: todo el contenido q se encuentra tras el simbolo ?, es decir la consulta.

-> Objeto Navigator:
Permite obtener información sobre el propio navegador
    Propiedades: 
        1. appCodeName: Cadena q representa el nombre del navegador
        2. appName: Cadena que representa el nombre oficial del navegador
        3. appMinorVersion: (Sólo Internet Explorer) Cadena que representa información extra sobre la versión del navegador
        4. appVersion: Cadena que representa la versión del navegador
        5. browserLanguage: Cadena que representa el idioma del navegador
        6. cookieEnabled: Boolean que indica si las cookies están habilitadas
        7. cpuClass: (Sólo Internet Explorer) Cadena que representa el tipo de CPU del usuario ("x86", "68K", "PPC", "Alpha", "Other")
        8. javaEnabled: Boolean que indica si Java está habilitado
        9. language: Cadena que representa el idioma del navegador
        10. mimeTypes: Array de los tipos MIME registrados por el navegador
        11. onLine: (Sólo Internet Explorer) Boolean que indica si el navegador está conectado a Internet
        12. oscpu: (Sólo Firefox) Cadena que representa el sistema operativo o la CPU
        13. platform: Cadena que representa la plataforma sobre la que se ejecuta el navegador
        14. plugins: Array con la lista de plugins instalados en el navegador
        15. preference(): (Sólo Firefox) Método empleado para establecer preferencias en el navegador
        16. product: Cadena que representa el nombre del producto (normalmente, es Gecko)
        17. productSub: Cadena que representa información adicional sobre el producto (normalmente, la versión del motor Gecko)
        18. securityPolicy: Sólo Firefox
        19. systemLanguage: (Sólo Internet Explorer) Cadena que representa el idioma del sistema operativo
        20. userAgent: Cadena que representa la cadena que el navegador emplea para identificarse en los servidores
        21. userLanguage: (Sólo Explorer) Cadena que representa el idioma del sistema operativo
        22. userProfile: (Sólo Explorer) Objeto que permite acceder al perfil del usuario

-> Objeto Screen:
Para obtener información sobre la pantalla del usuario
    Propiedades:
        1. availHeight: altura de pantalla disp para las ventanas.
        2. availWidth: anchura de pantalla disp para las ventanas.
        3. colorDepth: Profundidad de color de la pantalla (32bit)
        4. heigth: altura total de la pantalla en pixeles
        5. width: anchura total de la pantalla en pixeles.

---------------------------------------------------------------------------------
Generación de Texto y elementos HTML desde código:
Funciones necesarias para crear elementos HTML.
    1. createElement(etiqueta): crea un nodo de tipo Element que representa al elemento HTML cuya etiqueta se pasa como parámetro.
    2. createTextNode(contenido): crea un nodo de tipo Text que almacena el contenido textual de los elementos HTML.
    3. nodoPadre.appenChild(nodoHijo): añade un nodo como hijo de otro nodo.

EJEMPLO:
    . Crear un nodo tipo Element que representa el elemento
    var parrafo = document.createElement("p");
    . Crear un nodo tipo Text que será el contenido del elemento
    var contenido = document.createTextNode("Módulo DWEC");
    . Hacer que el nodo Text sea hijo del nodo Element
    parrafo.appendChild(contenido);
    . Finalmente añadir el nodo Element a la página
    document.body.appendChild(parrafo)

Funciones necesarias para eliminat elementos HTML
    1. removeChild(nodoAEliminar): Esta función debe ser invocada desde el padre.
        var elementoEliminar = document.getElementById("ElementoBorrar");
        elementoEliminar.parentNode.removeChild(elementoEliminar); 

----------------------------------------------------------------------------------
CREACION DE NUEVAS VENTANAS:
window.open(URL,nombre_ventana,forma_ventana)
    -URL: URL que deseamos abrir en la ventana secundaria.
    -nombre_ventana: nombre que se le asigna a esta ventana para dirigir enlaces con el atributo target del HTML.
    -forma_ventana: aspecto de la ventana secundaria.
        · width: ajusta el ancho de la ventana en pixeles.
        · heigth: ajusta el alto de la ventana
        · top: indica la posicion de la ventana en pixeles desde el borde superior de la pantalla y 
            el borde superior de la ventana
        · left: indica la posicion de la ventana en pixeles desde el el borde izquierdo de la pantalla y 
            el borde izquierdo de la ventana
        · scrollbars: Para definir de forma exacta si salen o no las barras de desplazamiento.
            scrollbars=NO | scrollbars=YES
        · resizable: resizable=NO | resizable=YES

    window.open("http://www.marca.com" , "PaginaMarca" ,"width=120,height=300,scrollbars=NO")
    nuevaVentana = window.open("ejemplocomunicacionventana2.html", "VENTANAHIJA", "height=300,width=400 left=200");  

------------------------------------------------------------------------------------
Comunicación entre ventanas:
Opcion 1: Método GET
    Pasar parametro+valor como parte de la URL
        function enviar(campo) {
            var valor = document.getElementById(campo).value;
            // abrir la ventana pasando los valores en la URL
            var ventana = window.open("/ventana.aspx?campo=" + campo +
            "&valor=" + valor,"Ventana","resizable=1,width=1100,height=600,
            scrollbars=1");
        }

Opcion 2: Guardar los valores en LocalStorage:
    Guardar el valor en el LocalStorage o el SessionStorage antes de abrirla ventana, y recuperar el valor en la
    ventana nueva.
        localStorage.setItem('valor', document.getElementById("nombre").value);

También se podría usar sessionStorage en vez de localStorage, de esta forma los valores se guardarían durante
el tiempo de sesión del navegador y se borrarían cuando el navegador se reinicie.
    Ventajas
        1. Sencillo
        2. Puedes guardar más datos de los que podrías pasar a través de la URL
    Inconvenientes
        1. No funcionará si el usuario tiene deshabilitadas las cookies.
        2. No funcionará si los protocolos no coinciden (http, https)
Ejemplos
 /*localStorage */
    //Guardar dato
        localStorage.setItem('nombre', 'Carlos');
    //Recuperar dato
        var nombre = localStorage.getItem('nombre');
    //Borrar dato
        localStorage.removeItem('nombre');
    //Borrar todos los datos
        localStorage.clear();

 /*sessionStorage */
    //Guardar dato
        sessionStorage.setItem('nombre', 'Carlos');
    //Recuperar dato
        var nombre = sessionStorage.getItem('nombre');


Opción 3. Leerlos datos del padre desde la ventana abierta: window.parent
    //Ejemplo
    var valorEnPadre = window.opener.document.getElementById("campo").value;

    localStorage.setItem('valor', document.getElementById("nombre").value);

Ventajas
    1. JavaScript puro y duro sin APIs que puedan fallar ni problemas de
        compatibilidad
    2. Sin problemas de tamaño
Inconvenientes
    1. No funcionará si el usuario tiene deshabilitadas las cookies.
    2. Requiere que las páginas estén en un servidor (funciona con http o https pero no con file://)

-----------------------------------------------------------------------------
Funciones predefinidas por el lenguaje:
    1. eval() -> evalua el codigo JS repentado como una cadena de caracteres
    2. isFinite() -> determina si el valor pasado es un número finito
    3. inNaN() -> Evalúa un argumento para determinar si es NaN
    4. parseInt() parseFloat() -> fuerza conversion
    5. number() string() -> fuerzan conversion
    6.1. encodeURI() -> Codifica caracteres como espacios en blanco o la ñ
    6.2. decodeURI() -> Realiza la acción inversa a encodeURI
    6.3. encodeURIComponent() -> Funciona de la misma maenra que encodeURI, pero no respeta caracteres especiales de URL como ? & = -, los codifica también
    6.4. decodeURIComponent() -> accion inversa a encodeURIComponent
    7. unescape() Decodifica caracteres especiales en una cadena, excepto: * @ - _ + . /
    8. escape() Codifica caracteres especiales en una cadena, excepto: * @ - _ + . /
-----------------------------------------------------------------------------
Funciones
1. Sintaxis formal: 
    function nombreFunción ([parámetros]){ instrucciones } 

2. Funciones flecha: 
    var suma = (numero1, numero2) => { return numero1 + numero2;}
    var suma = (numero1, numero2) => numero1 + numero2

    Nota: Con un parametro, no hace falta poner parentesis
    var saludar = nombre => console.log(`Hola, ${nombre}`)

3. Funciones con parámetros REST 
    El último parámetro de una función se puede referenciar con ... lo que hará que todos los argumentos restantes
    (suministrados por el usuario) se coloquen en un array de js
        function myFun(a, b, ...manyMoreArgs) {
            console.log("a", a);
            console.log("b", b);
            console.log("manyMoreArgs", manyMoreArgs);
        }
        myFun("one", "two", "three", "four", "five", "six");
            // Console Output:
            // a, one
            // b, two
            // manyMoreArgs, [three, four, five, six]
        Nota: Es posible que sólo la función tenga parámetros REST
        function fun1(...theArgs) {
            console.log(theArgs.length);
        }

        fun1(); // 0
        fun1(5); // 1
        fun1(5, 6, 7); // 3

4. Funciones con valores por defecto:
    var myFunc = function ( param1 = 'Hola', param2 = 'Mundo' ) {
        return param1 + ' ' + param2;
    };
    var myFunc = ( param1 = 'Hola', param2 = 'Mundo' ) => param1 + ' ' + param2;

    console.info( myFunc() ); // Hola Mundo
    console.info( myFunc( undefined, 'Paco' ) ); // Hola Paco
----------------------------------------------------------------------------
Uso del objeto arguments: 
    El objeto arguments devuelve el número de argumentos pasado, no devuelve los parámetros por defecto.

    var myFunc = function ( x = 10, y = 20, z = 30 ) {
        var sum = x + y + z;
        return sum + ' (' + arguments.length + ' argumentos pasados)';
    };
    console.info( myFunc( 1, 2, 3 ) ); // 6 (3 argumentos pasados)
    console.info( myFunc( 1, 2 ) ); 33 (2 argumentos pasados)
    console.info( myFunc( 1 ) ); 51 (1 argumentos pasados)

El valor undefinedcuenta como argumento
console.info( myFunc( 1, 2, undefined ) ); // 33 (3 argumentos pasados)

Exigiendo el uso de parámetros
    var isRequired = () => { throw new Error( 'Missing parameter' ); };
    var myFunc = ( param1 = isRequired() ) => param1;

    console.info( myFunc( 'Hola mund' ) );
    console.info( myFunc() ); // Error: Missing parameter

------------------------------------------------------------------------
Funciones anónimas autoejecutables:
1. Forma clásica:
    (function (){
        console.log ("Versión clásica");
    })();

2. Definida según JS The God Parts:
    ((function (){
        console.log ("Versión JS The God Parts");
    })());

3 Unaria
    +function (){
        console.log ("Versión Unaria");
    }();

4 Facebook
    !function (){
        console.log ("Versión Facebook");
    }();

------------------------------------------------------------------------
Gestión de arrays:
Existen dos formas para declarar Arrays en JS.
    1 Con constructor
        var alumno = new Array ("Carlos", 18);
    2 Sin constructor
        var alumno = ["Carlos", 18];

Acceso a todos los elementos de un array
    frutas.forEach(function (elemento, indice, array) {
        console.log(elemento, indice);
    });
    // Manzana 0
    // Banana 1

    array = ["Hola", "Mundo"];
    array.forEach (element => {
        console.log (element);
    })
    //Hola
    //Mundo

Métodos básicos:
1. Insertar elementos al principio de un array
    alumnos.unshift("profesor");
2. Insertar elementos alfinal de un array
     alumnos.push("profesor");
3. Eliminar el último elemento de un array
    alumnos.pop();
4. Obtener el número de elementos de un array
    alumnos.length; //2;
5. Eliminar un elemento con el índice de posición
    var elementoEliminado = frutas.splice(pos, 1); // así es como se elimina un elemento
    // ["Fresa", "Mango"];
6. Eliminar elementos con el índice de posición
    var vegetales = ['Repollo', 'Nabo', 'Rábano', 'Zanahoria'];
    console.log(vegetales);
    // ["Repollo", "Nabo", "Rábano", "Zanahoria"]
    var pos = 1, n = 2;
    var elementosEliminados = vegetales.splice(pos, n);
    // así es como se eliminan elementos, n define la cantidad de elementos a eliminar,
    // de esa posicion(pos) en adelante hasta el final del array.
    console.log(vegetales); // ["Repollo", "Zanahoria"] (el array original ha cambiado)
    console.log(elementosEliminados); // ["Nabo", "Rábano"]
7. Copiar un array: 
    var copiaSuperficial = frutas.slice();

8. Método map(): Crea un nuevo array con los resultados de la llamada a la funcion indicada aplicados a 
cada uno de sus elementos.
const notas = [4,5,6,7]
const notasSubidas = notas.map(nota=>nota+1) // notasSubidas = [5,6,7,8]

9. Método filter(): Crea un nuevo array con todos los elementos que cumplan la condicion impuesta.ç
    const alumnos = ["carlos","juan","alberto","luis"]
    const alumnosFiltrados = alumnos.filter(alumno => alumno.length>4) // alumnosFiltrados=["carlos","alberto"]

10. Método find():  Devuelve el valor del primer elemento del array que cumple la condicion impuesta.
    const numeros = [5,2,8,14,34]
    const elemento = numeros.find(element=>element>5) // elemento = 8

11. Método reduce(): Recorre todos los elementos de un array y realiza la funcionalidad necesaria a todos sus elementos,
devolviendo un resultado final
    const array1= [1,2,3,4]
    const reducer = (accumulator, currentValue) => accumulator + currentValue
      ↑ es una función
    sumatorio = array1.reduce(reducer) // sumatorio = 10
    sumatorio2 = array1.reduce(reducer,2) // sumatorio = 12 
      ↑ si añades un segundo parámetro, se suma tambien al array.

--------------------------------------------------------------------------------
Módulos:
Para trabajar con módulos tenemos a nuestra disposicion las siguientes palabras clave:
    1. export: para exportar uno o varios elementos del fichero actual.
    2. import: para importar uno o varios elementos desde otro fichero js.

A tener en cueenta a la hora de importar/exportar módulos:
1. Si queremos utilizar import y export desde el navegador actualmente deberemos añadir los módulos con
    la etiqueta <script src="js/importar.js" type="module"></script>

2. Para trabajar directamente con el navegador también deberemos cambiar la extension del archivo a .mjs
    <script src="js/importar.mjs" type="module"></script>

Exportación:
1. export{name} Añade el elemento name al módulo de exportación:
    let number = 4;
    export { number }; // Se crea un módulo y se añade number

2. export {n1,n2,n3...} Añade todos los elementos entre {} al módulo de exportación.

3. export * from './file.js' Añade todos los elementos al módulo de exportación
 
4. export default declaration  Declara una función o clase.
    export default function f2() {
        return "Manz";
    } 

- Se pueden poner alias:
    export { saludar, goodbye as despedir };

Importación:
1. import number from .file.js'  Importa el elemento por defecto de file.js en number

2. import {number} from './file.js'  Importa sólo el elemento number de file.js 

3. import {n1,n2..} from './file.js'  Importa los elementos indicados desde file.js

4. import *^as obj from './file.js'  Importa todos los elementos de file.js

5. import './file.js'  No importa los elementos, pero ejecuta el código de file.js

Al igual que con la exportación, también puedes renombrar elementos utilizando as seguido del nuevo nombre.

-------------------------------------------------------------------------------
Definicion de clases:
class Calculadora{
    constructor(){
        this.operando1 = ''
        this.operando2 = ''
    }

    function metodo1 = (atributos) => {//cosas a hacer}
}

var calcuLaura = new Calculadora(1,2)

Recorrer objetos:
for (var i=0; i< datos.length; i++) {
    ........
} 

------------------------------------------------------------------------------
Gestion de errores:
throw: para lanzar excepciones. Cuando se lanza una excepción, se especifica la expresión que contiene
el valor para ser lanzado:
    throw "Error2"; // Tipo string
    throw 42; // Tipo número
    throw true; // Tipo booleano
    throw {toString: function() { return "¡Soy un objeto!"; } };

Try-catch:
Consiste en un bloque try que contiene una o más intrucciones y ninguno o varios bloques catch que contienen sentencias que especifican 
que hacer si una excepción es arrojada en un bloque try.
    try {
    throw "myException" // genera una excepción
    }
    catch (e) {
    // instrucciones para manejar cualquier excepción generada
    logMyErrors(e) // Pasa el objeto de excepción a un manejador de errores
    }

Finally: Se ejecuta después de los try-catch. Ideal para "limpiar" cajas de texto después de ejecutar los bloques try-catch.
    function myFunction()
        var message, x;
        message = document.getElementById("message");
        message.innerHTML = "";
        x = document.getElementById("demo").value;

        try {
            if(x == "") throw "Empty";
            if(isNaN(x)) throw "Not a number";
            if(x > 10) throw "Too high";
            if(x < 5) throw "Too low";
        }
        catch(err) {
            message.innerHTML = "Error: " + err + ".";
        }
        finally {
            document.getElementById("demo").value = "";
        }
    }